version: '3.9'

services:
  jempi-async-receiver:
    image: jembi/jempi-async-receiver:${JEMPI_ASYNC_RECEIVER_IMAGE_TAG}
    environment:
      kafka.bootstrap.servers: ${KAFKA_HOSTS}
    deploy:
      replicas: ${JEMPI_ASYNC_RECEIVER_INSTANCE}
      resources:
        limits:
          memory: ${JEMPI_ASYNC_RECEIVER_MEMORY_LIMIT}
        reservations:
          memory: ${JEMPI_ASYNC_RECEIVER_MEMORY_RESERVE}
    networks:
      kafka:
      default:

  jempi-sync-receiver:
    image: jembi/jempi-sync-receiver:${JEMPI_SYNC_RECEIVER_IMAGE_TAG}
    environment:
      kafka.bootstrap.servers: ${KAFKA_HOSTS}
    deploy:
      replicas: ${JEMPI_SYNC_RECEIVER_INSTANCES}
      resources:
        limits:
          memory: ${JEMPI_SYNC_RECEIVER_MEMORY_LIMIT}
        reservations:
          memory: ${JEMPI_SYNC_RECEIVER_MEMORY_RESERVE}
    networks:
      kafka:
      default:

  jempi-pre-processor:
    image: jembi/jempi-pre-processor:${JEMPI_PRE_PROCESSOR_IMAGE_TAG}
    environment:
      kafka.bootstrap.servers: ${KAFKA_HOSTS}
    deploy:
      replicas: ${JEMPI_PRE_PROCESSOR_INSTANCES}
      resources:
        limits:
          memory: ${JEMPI_PRE_PROCESSOR_MEMORY_LIMIT}
        reservations:
          memory: ${JEMPI_PRE_PROCESSOR_MEMORY_RESERVE}
    networks:
      kafka:
      default:

  jempi-controller:
    image: jembi/jempi-controller:${JEMPI_CONTROLLER_IMAGE_TAG}
    environment:
      kafka.bootstrap.servers: ${KAFKA_HOSTS}
    deploy:
      replicas: ${JEMPI_CONTROLLER_INSTANCES}
      resources:
        limits:
          memory: ${JEMPI_CONTROLLER_MEMORY_LIMIT}
        reservations:
          memory: ${JEMPI_CONTROLLER_MEMORY_RESERVE}
    networks:
      kafka:
      default:

  jempi-em-calculator:
    image: jembi/jempi-em-calculator:${JEMPI_EM_CALCULATOR_IMAGE_TAG}
    environment:
      kafka.bootstrap.servers: ${KAFKA_HOSTS}
    deploy:
      replicas: ${JEMPI_EM_CALCULATOR_INSTANCES}
      resources:
        limits:
          memory: ${JEMPI_EM_CALCULATOR_MEMORY_LIMIT}
        reservations:
          memory: ${JEMPI_EM_CALCULATOR_MEMORY_RESERVE}
    networks:
      kafka:
      default:

  jempi-linker:
    image: jembi/jempi-linker:${JEMPI_LINKER_IMAGE_TAG}
    environment:
      kafka.bootstrap.servers: ${KAFKA_HOSTS}
    deploy:
      replicas: ${JEMPI_LINKER_INSTANCES}
      resources:
        limits:
          memory: ${JEMPI_LINKER_MEMORY_LIMIT}
        reservations:
          memory: ${JEMPI_LINKER_MEMORY_RESERVE}
    networks:
      kafka:
      default:

  jempi-postgresql-01:
    image: bitnami/postgresql-repmgr:15.2.0
    environment:
      POSTGRESQL_USERNAME: ${POSTGRESQL_USERNAME}
      POSTGRESQL_DATABASE: ${POSTGRESQL_DATABASE}
      REPMGR_PASSWORD: ${JEMPI_REPMGR_PASSWORD}
      REPMGR_PRIMARY_HOST: ${JEMPI_REPMGR_PRIMARY_HOST}
      REPMGR_PARTNER_NODES: ${JEMPI_REPMGR_PARTNER_NODES}
      REPMGR_NODE_NAME: jempi-postgresql-01
      REPMGR_NODE_NETWORK_NAME: jempi-postgresql-01
      ALLOW_EMPTY_PASSWORD: "yes"
    deploy:
      mode: replicated
      replicas: 1
      resources:
        limits:
          cpus: ${JEMPI_POSTGRES_CPU_LIMIT}
          memory: ${JEMPI_POSTGRES_MEMORY_LIMIT}
        reservations:
          cpus: ${JEMPI_POSTGRES_CPU_RESERVE}
          memory: ${JEMPI_POSTGRES_MEMORY_RESERVE}
    volumes:
      - "jempi-psql-01-data:/bitnami/postgresql"
    configs:
      - target: /docker-entrypoint-initdb.d/jempi_psql_init_db.sql
        source: jempi_psql_init_db.sql
  
volumes:
  jempi-psql-01-data:

networks:
  kafka:
    name: kafka_public
    external: true
  defualt:

configs:
  jempi_psql_init_db.sql:
    file: ./importer/jempi_psql_init_db.sql
    name: jempi_psql_init_db.sql-${jempi_psql_init_db_sql_DIGEST:?err}
    labels:
      name: jempi
