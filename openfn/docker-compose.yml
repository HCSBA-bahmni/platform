version: '3.9'

services:
  openfn:
    image: ${OpenFn_IMAGE}
    # This command runs a shell script that performs the following actions:
    # 1. Executes the Lightning.Release.migrate() function to handle database migrations.
    # 2. Sets up a user with the provided first name, last name, email, password, and role using the Lightning.Setup.setup_user function.
    #    - The user details are hardcoded with the first name "Test", last name "User", email "root@openhim.org", and password "instant101".
    #    - The role assigned to the user is "superuser".
    #    - The function also takes an API key from the environment variable ${OPENFN_API_KEY}.
    #    - Additionally, it sets up a schema with the name "openhim ndr" and type "http", including credentials and a base URL from environment variables.
    # 3. Starts the Lightning application using the /app/bin/lightning start command.
    command: >
      sh -c "/app/bin/lightning eval 'Lightning.Release.migrate()' && /app/bin/lightning eval 'Lightning.Setup.setup_user(%{first_name: \"Test\",last_name: \"User\",email: \"root@openhim.org\",password: \"instant101\", role: :superuser}, \"${OPENFN_API_KEY}\" ,[%{name: \"openhim ndr\", schema: \"http\", body: %{username: \"${FHIR_SERVER_USERNAME}\", password: \"${FHIR_SERVER_PASSWORD}\", baseUrl: \"${FHIR_SERVER_BASE_URL}\"}}])' && /app/bin/lightning start"
    deploy:
      resources:
        limits:
          cpus: '${DOCKER_WEB_CPUS:-0}'
          memory: '${DOCKER_WEB_MEMORY:-0}'
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - DISABLE_DB_SSL=${DISABLE_DB_SSL}
      - IS_RESETTABLE_DEMO=${IS_RESETTABLE_DEMO}
      - LISTEN_ADDRESS=${LISTEN_ADDRESS}
      - LOG_LEVEL=${LOG_LEVEL}
      - ORIGINS=${ORIGINS}
      - PRIMARY_ENCRYPTION_KEY=${PRIMARY_ENCRYPTION_KEY}
      - SECRET_KEY_BASE=${SECRET_KEY_BASE}
      - WORKER_RUNS_PRIVATE_KEY=${WORKER_RUNS_PRIVATE_KEY}
      - WORKER_SECRET=${WORKER_SECRET}
      - KAFKA_TRIGGERS_ENABLED=${KAFKA_TRIGGERS_ENABLED}
    healthcheck:
      test: '${DOCKER_WEB_HEALTHCHECK_TEST:-curl localhost:4000/health_check}'
      interval: '10s'
      timeout: '3s'
      start_period: '5s'
      retries: 3
    networks:
      - kafka_public
      - postgres
  worker:
    image: ${OpenFn_WORKER_IMAGE}
    deploy:
      resources:
        limits:
          cpus: '${DOCKER_WORKER_CPUS:-0}'
          memory: '${DOCKER_WORKER_MEMORY:-0}'
    environment:
      - WORKER_LIGHTNING_PUBLIC_KEY=${WORKER_LIGHTNING_PUBLIC_KEY}
      - WORKER_SECRET=${WORKER_SECRET}
      - NODE_ENV=production
    command: [ 'pnpm', 'start:prod', '-l', 'ws://openfn:${URL_PORT-4000}/worker' ]
    networks:
      - kafka_public
      - postgres

networks:
  kafka_public:
    name: kafka_public
    external: true
  postgres:
    name: postgres_public
    external: true
