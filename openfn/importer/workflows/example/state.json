{
  "id": "891a9242-66d8-4089-813d-50676d33905a",
  "name": "jembi-cdc-ahie",
  "description": "POC test project for ART patient use case",
  "inserted_at": "2024-09-26T10:04:11Z",
  "updated_at": "2024-09-26T10:04:11Z",
  "scheduled_deletion": null,
  "project_credentials": {
    "derrick.rono@jembi.org-openhim-ndr": {
      "id": "9ef53b55-f50b-4b3e-a610-5dd71ecf441d",
      "name": "openhim ndr",
      "owner": "derrick.rono@jembi.org"
    }
  },
  "history_retention_period": null,
  "dataclip_retention_period": null,
  "retention_policy": "retain_all",
  "workflows": {
    "1-process-cdr-bundle": {
      "id": "5e077ab9-3956-4a40-9369-37442cdc072d",
      "name": "1-process-cdr-bundle",
      "edges": {
        "kafka->parse-bundle": {
          "enabled": true,
          "id": "d7a60efd-b388-4f99-9d98-68e39fd54954",
          "source_trigger_id": "11013279-3676-45d8-8e33-b492257d69e2",
          "condition_type": "always",
          "target_job_id": "00a86a87-46d4-4d83-83bb-3c0829b869d2"
        },
        "parse-bundle->Register-Organization": {
          "enabled": true,
          "id": "2486e44c-b126-45e2-843b-2e155feb5c70",
          "source_job_id": "00a86a87-46d4-4d83-83bb-3c0829b869d2",
          "condition_type": "on_job_success",
          "target_job_id": "d9f273dc-5233-403a-afaa-c923e4c1d647"
        },
        "Register-Organization->map-encounters": {
          "enabled": true,
          "id": "0e79825e-a357-4c2c-8d0d-13cfc720a9a8",
          "source_job_id": "d9f273dc-5233-403a-afaa-c923e4c1d647",
          "condition_type": "on_job_success",
          "target_job_id": "f56eb274-64f6-4f2f-bfcf-58f1face3778"
        },
        "map-encounters->map-patients": {
          "enabled": true,
          "id": "2f6780a8-983f-43f7-85ca-382e83a2e557",
          "source_job_id": "f56eb274-64f6-4f2f-bfcf-58f1face3778",
          "condition_type": "on_job_success",
          "target_job_id": "95ff2b28-b077-4331-9970-7aaa7ca2ce33"
        },
        "map-patients->map-medications": {
          "enabled": true,
          "id": "4656e3d9-92c6-4986-ab17-f9258573539a",
          "source_job_id": "95ff2b28-b077-4331-9970-7aaa7ca2ce33",
          "condition_type": "on_job_success",
          "target_job_id": "a26e338f-4ec8-4f62-9093-61d7f5c24497"
        },
        "send-to-NDR->send-errors-to-kafka-topic": {
          "enabled": true,
          "id": "ffea6d08-27f5-458c-8f66-375a0b84367c",
          "source_job_id": "1d30372e-18fe-4950-a40d-aa08dbf80c7f",
          "condition_expression": "state.issue",
          "condition_type": "js_expression",
          "condition_label": "import errors",
          "target_job_id": "80d8b3f2-089d-42ab-908c-d3a3b6f85a64"
        },
        "map-medications->build-bundle": {
          "enabled": true,
          "id": "b92675c2-61af-49b1-aa8e-14135cd4b824",
          "source_job_id": "a26e338f-4ec8-4f62-9093-61d7f5c24497",
          "condition_type": "on_job_success",
          "target_job_id": "db6a52fc-caac-4607-81df-caa5a28ffd1c"
        },
        "build-bundle->send-to-NDR": {
          "enabled": true,
          "id": "58c74730-1eb7-4dc6-8e7d-5e31056f9142",
          "source_job_id": "db6a52fc-caac-4607-81df-caa5a28ffd1c",
          "condition_type": "on_job_success",
          "target_job_id": "1d30372e-18fe-4950-a40d-aa08dbf80c7f"
        }
      },
      "concurrency": null,
      "inserted_at": "2024-09-26T10:04:11Z",
      "updated_at": "2024-09-26T10:04:11Z",
      "jobs": {
        "parse-bundle": {
          "id": "00a86a87-46d4-4d83-83bb-3c0829b869d2",
          "name": "parse bundle",
          "body": "// this will take an incoming bundle and sort it into different resource types\nfn((state) => {\n  let data = state.data.body;\n  if (typeof data === \"string\") {\n    data = JSON.parse(data)\n  }\n\n  const next = {\n    entry: data.entry\n  }\n\n  console.log(`Loading ${next.entry.length} bundle items from input`)\n\n  return next;\n})\n\ngroup($.entry, 'resource.resourceType')\n\nfn((state) => {\n  const counts = Object.keys(state.data).map((k) => `${k} (${state.data[k].length})`);\n  console.log(`Sorted bundles into the following groups: ${counts.join('\\n  ')}`)\n  return {\n    inputs: state.data,\n  }\n})\n",
          "adaptor": "@openfn/language-common@2.0.1",
          "project_credential_id": null
        },
        "Register-Organization": {
          "id": "d9f273dc-5233-403a-afaa-c923e4c1d647",
          "name": "Register Organization",
          "body": "//For the POC test only we need to register the Organization first\n//... for each Bundle... and AFTER we can process the Bundle\nfn(state => {\n  const orgId =\n    state.inputs.Patient[0].resource.managingOrganization.reference.replace(\n      'Organization/',\n      ''\n    );\n  console.log('Setting up test organization', orgId);\n\n  const mappedOrganization = {\n    resourceType: 'Organization',\n    id: orgId,\n    meta: {\n      profile: ['http://moh.gov.et/fhir/hiv/StructureDefinition/organization'],\n    },\n    text: {\n      status: 'generated',\n      div: '<div xmlns=\"http://www.w3.org/1999/xhtml\"><p class=\"res-header-id\"><b>Generated Narrative: Organization CurrentServiceProviderExample</b></p><a name=\"CurrentServiceProviderExample\"> </a><a name=\"hcCurrentServiceProviderExample\"> </a><a name=\"CurrentServiceProviderExample-en-US\"> </a><p><b>identifier</b>: <code>http://moh.gov.et/fhir/hiv/identifier/mohid</code>/MOH001, <code>http://moh.gov.et/fhir/hiv/identifier/hfuid</code>/HFUID001</p><p><b>active</b>: true</p><p><b>type</b>: <span title=\"Codes:{http://snomed.info/sct 257622000}\">Current Healthcare Provider</span></p><p><b>name</b>: Meshwalkiya Health Center</p><p><b>address</b>: Meshulekia Kirkos Addis Ababa </p></div>',\n    },\n    identifier: [\n      {\n        system: 'http://moh.gov.et/fhir/hiv/identifier/mohid',\n        value: 'MOH001',\n      },\n      {\n        system: 'http://moh.gov.et/fhir/hiv/identifier/hfuid',\n        value: 'HFUID001',\n      },\n    ],\n    active: true,\n    type: [\n      {\n        coding: [\n          {\n            system: 'http://snomed.info/sct',\n            code: '257622000',\n          },\n        ],\n        text: 'Current Healthcare Provider',\n      },\n    ],\n    name: `Organization ${orgId}`,\n    address: [\n      {\n        line: ['Meshulekia'],\n        city: 'Kirkos',\n        district: 'Kirkos woreda 9',\n        state: 'Addis Ababa',\n      },\n    ],\n  };\n\n  return { ...state, mappedOrganization, orgId };\n});\n\n// basic HTTP put should do it\nput(`/fhir/Organization/${$.orgId}`, {\n  body: $.mappedOrganization,\n  headers: { 'content-type': 'application/json' },\n});\n\nfn(state => {\n  console.log('Organization registered!');\n  return state;\n});\n",
          "adaptor": "@openfn/language-http@6.4.3",
          "project_credential_id": "9ef53b55-f50b-4b3e-a610-5dd71ecf441d"
        },
        "map-encounters": {
          "id": "f56eb274-64f6-4f2f-bfcf-58f1face3778",
          "name": "map encounters",
          "body": "fn(state => {\n  console.log('Parsing encounters...');\n  state.encounters = [];\n  return state;\n});\n\neach($.inputs.Encounter, state => {\n  const input = state.data.resource;\n  console.log('Mapping encounter ', input.id);\n\n  util.setSystemMap({\n    'http://cdr.aacahb.gov.et/Encounter':\n      'http://moh.gov.et/fhir/hiv/identifier/encounter',\n  });\n\n  const visitType = util.findExtension(\n    input,\n    'http://cdr.aacahb.gov.et/visit-type'\n  );\n\n  const [_, patientId] = input.subject.reference.split('Patient/');\n  const patient = state.inputs.Patient.find(\n    e => e.resource.id === patientId\n  )?.resource;\n  if (!patient) {\n    console.log(\n      `WARNING: COULD NOT FIND PATIENT ${patientId ?? input.subject} IN BUNDLE`\n    );\n  }\n\n  // TODO: Future phase work out whether this is a target-facility-encounter or a entry-from-outside-target-facility-encounter\n  if (visitType) {\n    const serviceType = input.serviceType?.coding.find(\n      item =>\n        item.system === 'http://terminology.hl7.org/CodeSystem/service-type'\n    );\n\n    const result = builders.encounter('target-facility-encounter', {\n      id: input.id,\n      status: input.status,\n\n      class:\n        input.class ??\n        util.coding(\n          'Absent-or-unknown',\n          'http://moh.gov.et/fhir/hiv/CodeSystem/absent-unknown-code-system'\n        ),\n      identifier: input.identifier,\n      serviceType: serviceType && {\n        coding: serviceType,\n      },\n      period: input.period,\n      subject: input.subject,\n      serviceProvider: patient.managingOrganization,\n      type: input.type,\n    });\n\n    // Handle the visit type extension manually\n    util.addExtension(\n      result.type[0],\n      'http://moh.gov.et/fhir/hiv/StructureDefinition/encounter-visit-type',\n      util.concept([\n        visitType.valueString.toLowerCase(),\n        'http://moh.gov.et/fhir/hiv/CodeSystem/encounter-visit-type-code-system',\n      ])\n    ),\n      state.encounters.push(result);\n  } else {\n    console.log('WARNING: no visit type found for Encounter ', input.id);\n  }\n\n  return state;\n});\n\nfn(state => {\n  console.log(\n    `Finished parsing Encounters! Created ${state.encounters.length} Encounters`\n  );\n\n  return state;\n});\n",
          "adaptor": "@openfn/language-fhir-jembi@0.0.18",
          "project_credential_id": null
        },
        "map-patients": {
          "id": "95ff2b28-b077-4331-9970-7aaa7ca2ce33",
          "name": "map patients",
          "body": "// Handle patients (and related persons)\n\n// This import is needed for code assist in VSC\n// It is harmless to include in job code, but not needed in lightning\nimport { b, util } from '@openfn/language-fhir-jembi';\n\nconst createId = (base, type) => {\n  let id = `${base}${type}`;\n  if (id.length <= 64) {\n    // If the id is too long, cut the difference out of the base id\n    id = `${base.substr(0, base.length - (id.length - 64))}${type}`;\n  }\n  return id;\n};\n\n// Flag a resource as being newly created\n// This affects the final bundle\n// the __new__ property will be removed at the end\nconst markNew = resource => {\n  resource.__new__ = true;\n  return resource;\n};\n\n// Util function to map residential type on the address\nconst mapAddress = a => {\n  if (/rural/i.test(a.text)) {\n    const { text, ...address } = a;\n    return {\n      ...address,\n      residentialType: util.concept('Rural', [\n        '224804009',\n        'http://snomed.info/sct',\n      ]),\n    };\n  } else if (/urban/i.test(a.text)) {\n    const { text, ...address } = a;\n    return {\n      ...address,\n      residentialType: util.concept('Urban', [\n        '224807002',\n        'http://snomed.info/sct',\n      ]),\n    };\n  }\n  return a;\n};\n\nconst populationMap = {\n  'general population': {\n    code: 'General-Population',\n    display: 'General Population',\n  },\n  prisoners: {\n    code: 'Prisoner',\n    display: 'Prisoner',\n  },\n  'children of plhiv': {\n    code: 'Children-Of-PLHIV',\n    display: 'Children of PLHIV',\n  },\n  'partners of plhiv': {\n    code: 'Partners-Of-PLHIV',\n    display: 'Partners of PLHIV',\n  },\n  'discordant couples': {\n    code: 'Discordant-Couples',\n    display: 'Discordant Couples',\n  },\n  'other marps': {\n    code: 'Other-MARPS',\n    display: 'Other MARPS',\n  },\n  'female commercial sex workers': {\n    code: 'Female-Commercial-Sex-Workers',\n    display: 'Female Commercial Sex Workers',\n  },\n  'sex worker': {\n    code: 'Female-Commercial-Sex-Workers',\n    display: 'Female Commercial Sex Workers',\n  },\n  'distance drivers': {\n    code: 'Distance-Drivers',\n    display: 'Distance Drivers',\n  },\n  'mobile or daily laborers': {\n    code: 'Mobile-Daily-Laborers',\n    display: 'Mobile or Daily Laborers',\n  },\n  'ovc or aids orphaned': {\n    code: 'OVC-AIDS-Orphaned',\n    display: 'OVC or AIDS Orphaned',\n  },\n  tg: {\n    code: 'TG',\n    display: 'TG',\n  },\n  reguees: {\n    code: 'Refugee',\n    display: 'Refugee',\n  },\n  'people who inject drug': {\n    code: 'People-Who-Inject-Drug',\n    display: 'People who Inject drug',\n  },\n  msm: {\n    code: 'MSM',\n    display: 'MSM',\n  },\n};\n\nconst educationMap = {\n  'no education': {\n    code: 'LA35-1',\n    display: 'No schooling',\n  },\n  primary: {\n    code: 'LA32466-7',\n    display: 'Primary school education',\n  },\n  secondary: {\n    code: 'LA32467-5',\n    display: 'High school education',\n  },\n  tertiary: {\n    code: 'LA15568-1',\n    display: 'Graduated from a college or university',\n  },\n  tvet: {\n    code: 'LA39-3',\n    display: 'Technical or trade school',\n  },\n  'other, specify': {\n    code: 'LA46-8',\n    display: 'Other',\n  },\n  assoc: {\n    code: 'LA39-3',\n    display: 'Technical or trade school',\n  },\n  bd: {\n    code: 'LA15568-1',\n    display: 'Graduated from a college or university',\n  },\n  elem: {\n    code: 'LA32466-7',\n    display: 'Primary school education',\n  },\n  gd: {\n    code: 'LA15568-1',\n    display: 'Graduated from a college or university',\n  },\n  hs: {\n    code: 'LA32467-5',\n    display: 'High school education',\n  },\n  pb: {\n    code: 'LA15568-1',\n    display: 'Graduated from a college or university',\n  },\n  postg: {\n    code: 'LA15568-1',\n    display: 'Graduated from a college or university',\n  },\n  scol: {\n    code: 'LA32467-5',\n    display: 'High school education',\n  },\n  sec: {\n    code: 'LA32467-5',\n    display: 'High school education',\n  },\n};\n\nfn(state => {\n  console.log('Parsing patients...');\n  state.patients ??= [];\n  state.observations ??= [];\n  state.relations ??= [];\n\n  // This will map identifier systems for us automatically\n  util.setSystemMap({\n    'http://cdr.aacahb.gov.et/SmartCareID':\n      'http://moh.gov.et/fhir/hiv/identifier/SmartCareID',\n    'http://cdr.aacahb.gov.et/MRN': 'http://moh.gov.et/fhir/hiv/identifier/MRN',\n    'http://cdr.aacahb.gov.et/UAN': 'http://moh.gov.et/fhir/hiv/identifier/UAN',\n    'http://terminology.hl7.org/CodeSystem/v2-0131':\n      'http://terminology.hl7.org/CodeSystem/v2-0131',\n  });\n\n  return state;\n});\n\n// Create an NDR patient for each CDR patient\neach($.inputs.Patient, state => {\n  const input = state.data.resource;\n\n  console.log(`  Processing patient ${input.id}`);\n\n  const religion = util.findExtension(\n    input,\n    'http://hl7.org/fhir/StructureDefinition/patient-religion'\n  )?.valueCodeableConcept.coding[0];\n\n  const result = b.patient('patient', {\n    id: input.id,\n    religion:\n      religion &&\n      util.concept(\n        religion.display,\n        util.coding(\n          religion.code,\n          'http://terminology.hl7.org/CodeSystem/v3-ReligiousAffiliation'\n        )\n      ),\n    identifier: input.identifier,\n    name: input.name,\n    telecom: input.telecom,\n    gender: input.gender,\n    birthDate: input.birthDate,\n    maritalStatus: input.maritalStatus,\n    managingOrganization: input.managingOrganization,\n    address: input.address?.map(mapAddress),\n  });\n\n  state.patients.push(result);\n\n  return state;\n});\n\n// Map the observations for each patient\neach($.inputs.Patient, state => {\n  const input = state.data.resource;\n  console.log(`  Processing observations for patient ${input.id}`);\n  // Assumes one encounter per bundle\n  const encounter = state.inputs.Encounter[0].resource;\n\n  const occupation = util.findExtension(\n    input,\n    'http://cdr.aacahb.gov.et/Occupation'\n  );\n  if (occupation) {\n    state.observations.push(\n      markNew(\n        b.observation('patient-occupation-observation', {\n          id: createId(input.id, 'PatientOccupation'),\n          // what to do about id?\n          status: input.status ?? 'final',\n\n          effective: encounter.period?.start,\n          encounter,\n          performer: input.managingOrganization ?? state.orgId,\n\n          // Map the occupation string without a coding\n          value: util.concept(occupation.valueString, [\n            occupation.valueString,\n            'http://moh.gov.et/fhir/hiv/CodeSystem/occupation-code-system',\n          ]),\n\n          subject: input,\n        })\n      )\n    );\n  }\n\n  const education = util.findExtension(\n    input,\n    'http://cdr.aacahb.gov.et/EducationalLevel'\n  );\n  if (education) {\n    const ed =\n      education.valueString ?? education.valueCodeableConcept?.coding[0].code;\n    const edLabel =\n      education.valueString ??\n      education.valueCodeableConcept?.coding[0].display;\n    const mapped = educationMap[ed.toLowerCase()];\n    if (!mapped) {\n      console.error('ERROR: could not find mapped education for ', ed);\n    }\n    const value = util.concept(edLabel, [mapped.code, 'http://loinc.org']);\n\n    state.observations.push(\n      markNew(\n        b.observation('highest-education-observation', {\n          id: createId(input.id, 'HighestEducation'),\n          status: input.status ?? 'final',\n\n          effective: encounter.period?.start,\n          encounter,\n          performer: input.managingOrganization ?? state.orgId,\n          subject: input,\n          value,\n        })\n      )\n    );\n  }\n\n  const popGroup = util.findExtension(\n    input,\n    'http://cdr.aacahb.gov.et/TargetPopulationGroup'\n  );\n  if (popGroup) {\n    const group =\n      popGroup.valueString ?? popGroup.valueCodeableConcept?.coding[0].text;\n    const mapped = populationMap[group.toLowerCase()];\n    if (!mapped) {\n      console.error(\n        'ERROR: could not find mapped population group for ',\n        group\n      );\n    }\n    const value = util.concept(mapped.display, [\n      mapped.code,\n      'http://moh.gov.et/fhir/hiv/CodeSystem/target-population-category-code-system',\n    ]);\n\n    state.observations.push(\n      markNew(\n        b.observation('target-population-observation', {\n          id: createId(input.id, 'TargetPopulation'),\n          status: input.status ?? 'final',\n          effective: encounter.period?.start,\n          encounter,\n          performer: input.managingOrganization ?? state.orgId,\n          subject: input,\n          value,\n        })\n      )\n    );\n  }\n\n  return state;\n});\n\n// Find related people\neach($.inputs.RelatedPerson, state => {\n  const input = state.data.resource;\n\n  console.log(`  Processing related person ${input.id}`);\n\n  let patient;\n  if (input.patient) {\n    // Extract the actual ID out of the reference\n    const [_, patientId] = input.patient.reference.split('Patient/');\n    patient = state.inputs.Patient.find(\n      e => e.resource.id === patientId\n    )?.resource;\n    if (patient) {\n      console.log(`  Found patient ${input.patient.reference} in bundle`);\n    } else {\n      console.log(\n        'WARNING: COULD NOT FIND MATCHING PATIENT FOR ',\n        input.patient.reference\n      );\n      return state;\n    }\n  }\n\n  const r = b.relatedPerson('related-person', {\n    ...input, // this should cover the basics\n    id: input.id,\n    extension: input.extension,\n\n    address: input.address?.map(mapAddress),\n\n    relationship: input.relationship.reduce(\n      (obj, next) => Object.assign(obj, next),\n      {}\n    ),\n  });\n\n  state.relations.push(r);\n\n  return state;\n});\n\nfn(state => {\n  console.log(\n    `Finished parsing patients! Created ${state.patients.length} Patients, ${state.observations.length} Observations and ${state.relations.length} Related Persons`\n  );\n\n  return state;\n});\n",
          "adaptor": "@openfn/language-fhir-jembi@0.0.18",
          "project_credential_id": null
        },
        "map-medications": {
          "id": "a26e338f-4ec8-4f62-9093-61d7f5c24497",
          "name": "map medications",
          "body": "const createId = (base, type) => {\n  let id = `${base}${type}`;\n  if (id.length > 64) {\n    // If the id is too long, cut the difference out of the base id\n    id = `${base.substr(0, base.length - (id.length - 64))}${type}`;\n  }\n  return id;\n};\n\n// Flag a resource as being newly created\n// This affects the final bundle\n// the __new__ property will be removed at the end\nconst markNew = resource => {\n  resource.__new__ = true;\n};\n\nconst findServiceProvider = (encounter, patient) =>\n  encounter?.serviceProvider ?? patient?.managingOrganization;\n\nconst categoryTypeMap = {\n  '1st switch': 'First-Switch',\n  '2nd switch': 'Second-Switch',\n  '3rd switch': 'Third-Switch',\n  '1st substitution': 'First-Substitute',\n  '2nd substitution': 'Second-Substitute',\n  '3rd substitution': 'Third-Substitute',\n  '4th substitution': 'Fourth-Substitute',\n  '5th substitution': 'Fifth-Substitute',\n  '6th substitution': 'Sixth-Substitute',\n};\n\nconst treatmentFailureMap = {\n  'Virologic failure': 'Virologic-Failure',\n  'Clinical failure': 'Clinical-Failure',\n  'Immunologic failure': 'Immunologic-Failure',\n};\n\nconst substituteReasonMap = {\n  'Risk of pregnancy': 'LA6531-3',\n  Pregnancy: 'LA6530-5',\n  'New drug available': 'LA6533-9',\n  'Due to new TB': 'LA6532-1',\n  'Drug stock-out': 'LA6534-7',\n  'Toxicity/Side effects': 'LA6529-7',\n  Other: 'LA6535-4',\n  Anemia: 'LA6535-4',\n};\n\nconst stoppedReasonMap = {\n  'toxicity/side effects': {\n    code: 'LA6529-7',\n    text: 'Toxicity/Side Effects',\n  },\n  pregnancy: {\n    code: 'A6530-5',\n    text: 'Pregnancy',\n  },\n  'planned treatment interruption': {\n    code: '18733-6',\n    text: 'Attending Progress note',\n  },\n  'other patient decisions': {\n    code: '18733-6',\n    text: 'Attending Progress note',\n  },\n  'poor adherence': {\n    code: 'LA31432-0',\n    text: 'Not adherent to treatment',\n  },\n  'planned treatment interruption': {\n    code: 'LP56812-8',\n    text: 'Medication regimen.status',\n  },\n  'patient lack finances': {\n    code: 'LA28316-0',\n    text: 'Financial concerns',\n  },\n  'other patient decisions': {\n    code: '51855-5',\n    text: 'Patient Note',\n  },\n  'illness/hospitalization': {\n    code: '34130-5',\n    text: 'Hospital Progress note',\n  },\n  'drugs out of stock': {\n    code: 'LA6534-7',\n    text: 'Drug Out of Stock',\n  },\n  other: {\n    code: 'LA46-8',\n    text: 'Other',\n  },\n};\n\nfn(state => {\n  console.log('Parsing medications...');\n  state.medicationDispense = [];\n  state.medication = [];\n  state.observations ??= [];\n  state.careplans ??= [];\n  state.requests ??= [];\n  state.admin ??= [];\n\n  return state;\n});\n\nconst extractMedication = (state, input) => {\n  const { coding, text } = input.medicationCodeableConcept;\n\n  const codes = coding.find(\n    c => c.system === 'http://cdr.aacahb.gov.et/hiv-regimen-codes'\n  );\n  const c = [\n    codes.code,\n    'http://moh.gov.et/fhir/hiv/CodeSystem/arv-treatment-code-system',\n  ];\n\n  let value;\n  if (text) {\n    value = util.concept(text, c);\n  } else {\n    value = util.concept(codes.code, c);\n  }\n\n  const m = b.medication('arv-regimen-medication', {\n    id: `${input.id}Medication`,\n    status: 'active',\n    code: value,\n  });\n  markNew(m);\n  return m;\n};\n\nconst extractAdmin = (state, input, encounter, medication, request) => {\n  const end = util.findExtension(\n    input,\n    'http://cdr.aacahb.gov.et/dose-end-date'\n  );\n  if (end) {\n    const ma = b.medicationAdministration('arv-medication-administration', {\n      id: createId(input.id, 'ARVMedicationAdministration'),\n      status: 'completed',\n      medication: util.ref(medication),\n      subject: input.subject,\n      context: input.context,\n      request,\n      effective: end.valueDateTime,\n      //effective: encounter.period,\n    });\n    markNew(ma);\n    return ma;\n  }\n};\n\nconst extractRequest = (\n  state,\n  input,\n  careplan,\n  medication,\n  dispense,\n  encounter,\n  observation\n) => {\n  const r = b.medicationRequest('arv-medication-request', {\n    id: createId(input.id, 'ARVMedicationRequest'),\n    status: 'completed',\n    intent: 'order',\n    medication,\n    basedOn: careplan,\n    dispenseRequest: {\n      quantity: {\n        value: parseInt(input.quantity.value),\n        unit: 'TAB',\n        system: 'http://terminology.hl7.org/CodeSystem/v3-orderableDrugForm',\n        code: 'TAB',\n      },\n    },\n    subject: input.subject,\n    encounter: input.context,\n    authoredOn: encounter.period?.start,\n    identifier: {\n      value: dispense.id,\n      system: 'http://moh.gov.et/fhir/hiv/identifier/medication',\n    },\n    reasonReference: util.reference(observation),\n  });\n\n  markNew(r);\n\n  return r;\n};\n\nconst extractCareplan = (state, input, encounter, patient) => {\n  const cp = b.carePlan('art-follow-up-careplan', {\n    id: createId(input.id, 'ARTFollowUpCareplan'),\n    status: 'active',\n    intent: 'order',\n    subject: input.subject,\n    encounter: input.context,\n    created: encounter.period?.start,\n    performer: findServiceProvider(encounter, patient),\n    category: [\n      {\n        coding: [\n          {\n            system:\n              'http://moh.gov.et/fhir/hiv/CodeSystem/care-plan-category-code-system',\n            code: 'art-follow-up-care-plan',\n          },\n        ],\n        text: 'ART',\n      },\n    ],\n  });\n  markNew(cp);\n  return cp;\n};\nconst extractCareplanExtensions = (state, input, plan, encounter) => {\n  const nextVisit = util.findExtension(\n    encounter,\n    'http://cdr.aacahb.gov.et/next-visit'\n  );\n  if (nextVisit) {\n    util.addExtension(\n      plan.activity[0],\n      'http://moh.gov.et/fhir/hiv/StructureDefinition/care-plan-next-visit',\n      nextVisit.valueDateTime\n    );\n  }\n};\n\n// This maps the actual dispense object\nconst mapDispense = (_state, input /* Dispense resource*/, encounter) => {\n  // Create a matching dispense\n  const handover = util.findExtension(\n    input,\n    'http://cdr.aacahb.gov.et/dose-end-date'\n  );\n\n  return b.medicationDispense('arv-medication-dispense', {\n    id: input.id,\n    status: input.status,\n    subject: input.subject,\n    context: input.context,\n    quantity: input.quantity && {\n      ...input.quantity,\n      value: parseInt(input.quantity.value),\n      unit: 'TAB',\n      code: 'TAB',\n    },\n    daysSupply: input.daysSupply && {\n      ...input.daysSupply,\n      value: parseInt(input.daysSupply.value),\n      unit: 'Days',\n      code: 'd',\n    },\n    whenHandedOver: handover?.valueDateTime,\n    medication: input.reference,\n    // missing properties will be added later in the script\n  });\n};\n\n// This pulls out a bunch of observations\nconst extractObservations = (state, input, encounter, patient) => {\n  const result = {};\n  let stopReasonObs;\n\n  const stopReason = util.findExtension(\n    input,\n    'http://cdr.aacahb.gov.et/medication-stopped-reason'\n  );\n  if (stopReason) {\n    console.log(\n      `creating art-followup-stopped-reasons-observation for ${input.id}`\n    );\n\n    //console.log('stopReason::', JSON.stringify(stopReason, null, 2));\n\n    const stopReasonObs = b.observation(\n      'art-followup-stopped-reasons-observation',\n      {\n        id: createId(input.id, 'ARTFollowupStatusStoppedReasonObservation'),\n        status: 'final',\n        subject: input.subject,\n        encounter,\n        effective: encounter?.period?.start,\n        performer: findServiceProvider(encounter, patient),\n      }\n    );\n\n    let text = stopReason.valueString ?? stopReason.valueCodeableConcept?.text;\n\n    //('stopReason text::', JSON.stringify(text, null, 2));\n    if (!text) {\n      console.error(`No stop reason text found for `, input.id);\n    }\n\n    const value = {};\n    const mapped = stoppedReasonMap[text.toLowerCase()];\n    //console.log('mapped stopReasonObs::', JSON.stringify(mapped, null, 2));\n    if (mapped) {\n      util.addExtension(\n        value,\n        'http://moh.gov.et/fhir/hiv/StructureDefinition/reason-art-stopped',\n        util.concept(mapped.text, [mapped.code, 'http://loinc.org'])\n      );\n\n      //console.log('stopReasonObs::', JSON.stringify(stopReasonObs, null, 2));\n\n      stopReasonObs['valueCodeableConcept'] = value;\n\n      // console.log(\n      //   'NEW stopReasonObs::',\n      //   JSON.stringify(stopReasonObs, null, 2)\n      // );\n\n      markNew(stopReasonObs);\n\n      // We have to write the concept like this because it's a strange structure\n      // the adaptor should handle this a lot better really\n      state.observations.push(stopReasonObs);\n      console.log('Stopped Obs pushed...');\n    } else {\n      console.error('WARNING: NO MAPPED VALUE FOR  STOP-REASON: ', text);\n    }\n  }\n\n  if (input.statusReasonCodeableConcept) {\n    const reason = Array.isArray(input.statusReasonCodeableConcept)\n      ? input.statusReasonCodeableConcept[0]\n      : input.statusReasonCodeableConcept;\n    const o = b.observation('art-followup-status-observation', {\n      id: createId(input.id, 'ARTFollowupStatusObservation'),\n      status: 'final',\n      subject: input.subject,\n      encounter,\n      effective: encounter?.period?.start,\n      value: util.concept([\n        reason.coding[0].code,\n        'http://moh.gov.et/fhir/hiv/CodeSystem/art-follow-up-status-code-system',\n      ]),\n      hasMember: stopReasonObs ? util.ref(stopReasonObs) : undefined,\n      performer: findServiceProvider(encounter, patient),\n    });\n    result.followUpStatus = o;\n    state.observations.push(o);\n  }\n\n  const extSwitchType = util.findExtension(\n    input,\n    'http://cdr.aacahb.gov.et/switch-type'\n  );\n  const extSwitchReason = util.findExtension(\n    input,\n    'http://cdr.aacahb.gov.et/switch-reason'\n  );\n\n  let changeObs;\n  let changeTypeObs;\n  let changeReasonObs;\n\n  if (input.substitution || extSwitchType) {\n    changeObs = b.observation('arv-regimen-changed-observation', {\n      id: createId(input.id, 'ARVRegimenChange'),\n      status: 'final',\n      subject: input.subject,\n      encounter,\n      effective: encounter?.period,\n      performer: findServiceProvider(encounter, patient),\n\n      value: util.concept([\n        input.substitution ? 'Substituted' : 'Switched',\n        'http://moh.gov.et/fhir/hiv/CodeSystem/arv-regimen-change-category-code-system',\n      ]),\n      // hasMember will be set at the end\n    });\n    markNew(changeObs);\n    state.observations.push(changeObs);\n  }\n\n  if (input.substitution?.type || extSwitchType) {\n    let value;\n    if (extSwitchType) {\n      const code = categoryTypeMap[extSwitchType.valueString];\n      if (!code) {\n        console.error('No mapped switch code found for ', input.id);\n        console.log(extSwitchType);\n      }\n      value = util.concept([\n        code,\n        'http://moh.gov.et/fhir/hiv/CodeSystem/arv-regimen-switch-type-code-system',\n      ]);\n    } else {\n      const code = categoryTypeMap[input.substitution?.type.text];\n      if (!code) {\n        console.error('No mapped switch code found for ', input.id);\n        console.log(input.substitution);\n      }\n      value = util.concept([\n        code,\n        'http://moh.gov.et/fhir/hiv/CodeSystem/arv-regimen-substitute-type-code-system',\n      ]);\n    }\n\n    changeTypeObs = b.observation('arv-change-category-type-observation', {\n      id: createId(input.id, 'ARVRegimenChangeCategoryType'),\n      status: 'final',\n      subject: input.subject,\n      encounter,\n      effective: encounter?.period?.start,\n      performer: findServiceProvider(encounter, patient),\n      value,\n      // hasmember is added later\n    });\n    markNew(changeTypeObs);\n    state.observations.push(changeTypeObs);\n  }\n\n  if (extSwitchReason ?? input.substitution?.reason) {\n    let reason;\n    if (extSwitchReason ?? input.substitution?.reason) {\n      reason =\n        extSwitchReason?.valueCodeableConcept?.coding[0].code ??\n        extSwitchReason?.valueString;\n    } else {\n      reason = input.substitution?.reason[0].text;\n    }\n\n    let reasonLabel;\n    if (extSwitchReason) {\n      reasonLabel =\n        extSwitchReason?.valueCodeableConcept?.coding[0].display ??\n        extSwitchReason?.valueString;\n    } else {\n      reasonLabel = input.substitution?.reason[0].text;\n    }\n    //console.log('reasonLabel ::', reasonLabel);\n\n    if (!reason) {\n      console.error('No reason observation found for ', input.id);\n      console.log(extSwitchReason || input.substitution);\n    }\n\n    reason = treatmentFailureMap[reason] || 'LA46-8' /* Other */;\n    const reasonCode = substituteReasonMap[reasonLabel] || 'LA6535-4'; /*Other*/\n    //console.log('reasonCode ::', reasonCode);\n\n    const value = util.concept(reasonLabel, ['http://loinc.org', reasonCode]);\n\n    // Add an extension to the new value concept\n    util.addExtension(\n      value,\n      'http://moh.gov.et/fhir/hiv/StructureDefinition/cd4-vl-classification-for-treatment-failure',\n      util.concept([\n        reason,\n        'http://moh.gov.et/fhir/hiv/CodeSystem/cd4-vl-classification-for-treatment-failure-code-system',\n      ])\n    );\n\n    changeReasonObs = b.observation('arv-regimen-change-reason-observation', {\n      id: createId(input.id, 'ARVRegimenChangeReason'),\n      status: 'final',\n      subject: input.subject,\n      encounter,\n      effective: encounter?.period?.start,\n      performer: findServiceProvider(encounter, patient),\n      value,\n      //hasMember: changeObs, //reference moved to Obs arv-regimen-changed-observation\n    });\n    markNew(changeReasonObs);\n    state.observations.push(changeReasonObs);\n  }\n\n  if (changeObs) {\n    changeObs.hasMember = [changeTypeObs, changeReasonObs]\n      .filter(Boolean)\n      .map(util.ref);\n  }\n\n  return result;\n};\n\neach($.inputs.MedicationDispense, state => {\n  const input = state.data.resource;\n\n  console.log(`Processing medication dispense ${input.id}`);\n\n  let encounter;\n  if (input.context) {\n    // Extract the actual ID out of the reference\n    const [_, encounterId] = input.context.reference.split('Encounter/');\n    encounter = state.inputs.Encounter.find(\n      e => e.resource.id === encounterId\n    )?.resource;\n    if (encounter) {\n      console.log(`  Found encounter ${input.context.reference} in bundle`);\n    } else {\n      console.log(\n        'WARNING: COULD NOT FIND MATCHING ENCOUNTER FOR ',\n        input.context\n      );\n    }\n  }\n\n  const [_, patientId] = input.subject.reference.split('Patient/');\n  const patient = state.inputs.Patient.find(\n    e => e.resource.id === patientId\n  )?.resource;\n\n  const dispense = mapDispense(state, input, encounter);\n\n  state.medicationDispense.push(dispense);\n\n  const med = extractMedication(state, input);\n  dispense.medicationReference = util.reference(med);\n  state.medication.push(med);\n\n  const plan = extractCareplan(state, input, encounter, patient);\n  state.careplans.push(plan);\n\n  const o = extractObservations(state, input, encounter, patient);\n\n  const request = extractRequest(\n    state,\n    input,\n    plan,\n    med,\n    dispense,\n    encounter,\n    o.followUpStatus\n  );\n  dispense.authorizingPrescription = [util.ref(request)];\n  state.requests.push(request);\n\n  // care plan and request have circular dependencies, so sort out plan.activity here\n  plan.activity = [{ reference: util.reference(request) }];\n  extractCareplanExtensions(state, input, plan, encounter);\n\n  const admin = extractAdmin(state, input, encounter, med, request);\n  if (admin) {\n    state.admin.push(admin);\n  }\n\n  return state;\n});\n\nfn(state => {\n  console.log(\n    `Finished parsing medications! Created ${state.medicationDispense.length} Patients`\n  );\n\n  return state;\n});\n",
          "adaptor": "@openfn/language-fhir-jembi@0.0.18",
          "project_credential_id": null
        },
        "send-to-NDR": {
          "id": "1d30372e-18fe-4950-a40d-aa08dbf80c7f",
          "name": "send to NDR",
          "body": "fn(state => {\n  console.log('Sending final bundle to NDR');\n  return state;\n});\n\npost('/fhir', {\n  body: $.bundle,\n  headers: { 'content-type': 'application/json' },\n  parseAs: 'json',\n}).catch(async (response, state) => {\n  const err = JSON.parse(response.body)\n  console.error('Error from NDR FHIR')\n  console.error(err)\n  state.issue = err.issue;\n  return state\n})\n\nfn(state => {\n  console.log('Done!');\n  return {\n    issue: state.issue,\n    bundle: state.bundle,\n    data: state.data,\n    response: state.response,\n  };\n});\n",
          "adaptor": "@openfn/language-http@6.4.3",
          "project_credential_id": "9ef53b55-f50b-4b3e-a610-5dd71ecf441d"
        },
        "send-errors-to-kafka-topic": {
          "id": "80d8b3f2-089d-42ab-908c-d3a3b6f85a64",
          "name": "send errors to kafka topic",
          "body": "fn(state => {\n  console.log('Catching errors to send to kafka topic fhir-errors...');\n  console.log(state.issue)\n  return state;\n});\n\n //send error message from FHIR API\npost('/openfn/fhir-errors', {\n  body: JSON.stringify($.issue),\n  headers: { 'content-type': 'application/json' },\n});\n\nfn(state => {\n  console.log('Sending failed bundle to kafka topic dead-queue...');\n  return state;\n});\n\n//send final Bundle we mapped\npost('/openfn/dead-queue', {\n  body: $.bundle, \n  headers: { 'content-type': 'application/json' },\n});\n",
          "adaptor": "@openfn/language-http@6.4.3",
          "project_credential_id": "9ef53b55-f50b-4b3e-a610-5dd71ecf441d"
        },
        "build-bundle": {
          "id": "db6a52fc-caac-4607-81df-caa5a28ffd1c",
          "name": "build bundle",
          "body": "const wrapResource = (res) => {\n  const { __new__, ...resource } = res;\n  return {\n    request: {\n      method: __new__ ? \"POST\" : \"PUT\",\n      url: __new__ ? res.resourceType : `${res.resourceType}/${res.id}`\n    },\n    resource,\n  }\n}\n\nfn((state) => {\n  console.log('Building final bundle...')\n\n  delete state.inputs\n\n  const bundle = {\n    \"resourceType\": \"Bundle\",\n    \"type\": \"transaction\",\n    \"entry\": []\n  };\n\n  // Write all data onto state\n  for (const k in state) {\n    const arr = state[k]\n    if (Array.isArray(arr)) {\n      bundle.entry.push(...arr.filter(a => a.resourceType).map(wrapResource))\n    }\n  }\n\n  console.log(`Bundle built with ${bundle.entry.length} items`)\n\n  const counts = {}\n  for (const res of bundle.entry ) {\n    try {\n    const type = res.resource.meta.profile[0].split('StructureDefinition/')[1]\n    counts[type] ??= 0\n    counts[type] += 1\n    } catch(e) {\n      console.log(res)\n      throw e\n    }\n  }\n\n  console.log(counts)\n\n  return { bundle };\n\n})\n",
          "adaptor": "@openfn/language-fhir-jembi@0.0.18",
          "project_credential_id": null
        }
      },
      "deleted_at": null,
      "lock_version": 1,
      "triggers": {
        "kafka": {
          "enabled": true,
          "id": "11013279-3676-45d8-8e33-b492257d69e2",
          "type": "webhook"
        }
      }
    }
  },
  "requires_mfa": false
}